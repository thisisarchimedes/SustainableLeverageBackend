name: Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Test
        run: yarn test

  deploy-uniswap-sdk-layer:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Install dependencies for Lambda Layer
        run: |
          mkdir -p layer/nodejs
          cd layer/nodejs
          yarn init -y
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk
          cd ../..
          zip -r layer.zip layer/
      - name: Deploy Layer to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws lambda publish-layer-version \
            --layer-name uniswap-sdk \
            --zip-file fileb://layer.zip \
            --compatible-runtimes nodejs18.x

  deploy-sustainable-leverage-liquidation-bot:
    runs-on: ubuntu-latest
    needs: ['deploy-uniswap-sdk-layer', 'test']
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Get latest version of uniswap-sdk layer
        run: |
          LATEST_VERSION=$(aws lambda list-layer-versions --layer-name uniswap-sdk | jq -r '.LayerVersions | max_by(.Version) | .Version')
          LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:240910251918:layer:uniswap-sdk:$LATEST_VERSION"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Remove development dependencies
        run: yarn --production
      - name: Prepare deployment package
        run: |
          mkdir -p deploy-package
          rsync -av --progress ./dist/ ./deploy-package/ --exclude test
          cp -r ./node_modules ./deploy-package/
      - name: List contents of deploy-package directory
        run: ls -al ./deploy-package
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install AWS SAM CLI
        run: pip install --user aws-sam-cli
      - name: Package the SAM application
        run: sam package --template-file template.yaml --output-template-file packaged.yaml
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAYER_ARN: ${{ env.LAYER_ARN }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
          S3_ADDRESSES_KEY: ${{ secrets.S3_ADDRESSES_KEY }}
          RPC_URL: ${{ secrets.RPC_URL }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: yarn serverless deploy

  deploy-sustainable-leverage-liquidation-bot-demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ['deploy-uniswap-sdk-layer', 'test']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Get latest version of uniswap-sdk layer
        run: |
          LATEST_VERSION=$(aws lambda list-layer-versions --layer-name uniswap-sdk | jq -r '.LayerVersions | max_by(.Version) | .Version')
          LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:240910251918:layer:uniswap-sdk:$LATEST_VERSION"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Remove development dependencies
        run: yarn --production
      - name: Prepare deployment package
        run: |
          mkdir -p deploy-package
          rsync -av --progress ./dist/ ./deploy-package/ --exclude test
          cp -r ./node_modules ./deploy-package/
      - name: List contents of deploy-package directory
        run: ls -al ./deploy-package
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install AWS SAM CLI
        run: pip install --user aws-sam-cli
      - name: Package the SAM application
        run: sam package --template-file template.yaml --output-template-file packaged.yaml
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAYER_ARN: ${{ env.LAYER_ARN }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
          S3_ADDRESSES_KEY: ${{ secrets.S3_ADDRESSES_KEY }}
          RPC_URL: ${{ secrets.RPC_URL }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: yarn serverless deploy
