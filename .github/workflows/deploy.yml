name: Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}  # SSH private key stored in GitHub secrets
  EC2_HOST: ${{ secrets.EC2_HOST }}        # EC2 instance IP or domain
  EC2_USER: ubuntu
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Install dependencies
        run: yarn
      - name: Build
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          RPC_URL: ${{ secrets.RPC_URL }}
        run: yarn build
      - name: Test
        env:
          DB_HOST: ${{ secrets.DEMO_DB_HOST }}
          DB_PORT: ${{ secrets.DEMO_DB_PORT }}
          DB_NAME: ${{ secrets.DEMO_DB_NAME }}
          DB_USER: ${{ secrets.DEMO_DB_USER }}
          DB_PASSWORD: ${{ secrets.DEMO_DB_PASSWORD }}
          S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
          S3_ADDRESSES_KEY: ${{ secrets.DEMO_S3_ADDRESSES_KEY }}
          RPC_URL: ${{ secrets.DEMO_RPC_URL }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_API_URI: ${{ secrets.NEW_RELIC_API_URI }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          yarn test
  
  deploy-sustainable-leverage-liquidation-bot-demo-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          yarn
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk
          yarn global add pm2

      - name: Build
        run: yarn build

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          source: "."
          target: "/srv"

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /srv
            cat > .env << EOF
            DB_HOST: ${{ secrets.DEMO_DB_HOST }}
            DB_PORT: ${{ secrets.DEMO_DB_PORT }}
            DB_NAME: ${{ secrets.DEMO_DB_NAME }}
            DB_USER: ${{ secrets.DEMO_DB_USER }}
            DB_PASSWORD: ${{ secrets.DEMO_DB_PASSWORD }}
            S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
            S3_ADDRESSES_KEY: ${{ secrets.DEMO_S3_ADDRESSES_KEY }}
            RPC_URL: ${{ secrets.DEMO_RPC_URL }}
            MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
            NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
            NEW_RELIC_API_URI: ${{ secrets.NEW_RELIC_API_URI }}
            PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
            ENVIRONMENT: "demo"
            EOF
            pm2 kill                      # Stops all PM2-managed applications
            yarn install --production     # Install production dependencies
            pm2 start "yarn liquidator"   # Run the liquidator bot

  deploy-uniswap-sdk-layer:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Install dependencies for Lambda Layer
        run: |
          mkdir -p layer/nodejs
          cd layer/nodejs
          yarn init -y
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk
          cd ..
          zip -r layer.zip nodejs/
      - name: Deploy Layer to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws lambda publish-layer-version \
            --layer-name uniswap-sdk \
            --zip-file fileb://layer/layer.zip \
            --compatible-runtimes nodejs18.x

  deploy-sustainable-leverage-liquidation-bot:
    runs-on: ubuntu-latest
    needs: ["deploy-uniswap-sdk-layer", "test"]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Get latest version of uniswap-sdk layer
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          LATEST_VERSION=$(aws lambda list-layer-versions --layer-name uniswap-sdk | jq -r '.LayerVersions | max_by(.Version) | .Version')
          echo LATEST_VERSION=$LATEST_VERSION
          LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:240910251918:layer:uniswap-sdk:$LATEST_VERSION"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Remove development dependencies
        run: yarn --production
      - name: Install Serverless Framework
        run: |
          yarn global add serverless
          serverless plugin install -n serverless-offline
          serverless plugin install -n serverless-dotenv-plugin
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAYER_ARN: ${{ env.LAYER_ARN }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
          S3_ADDRESSES_KEY: ${{ secrets.S3_ADDRESSES_KEY }}
          RPC_URL: ${{ secrets.RPC_URL }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_API_URI: ${{ secrets.NEW_RELIC_API_URI }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ENVIRONMENT: "staging"
        run: serverless deploy --stage prod

  deploy-sustainable-leverage-liquidation-bot-demo:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ["deploy-uniswap-sdk-layer", "test"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Get latest version of uniswap-sdk layer
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          LATEST_VERSION=$(aws lambda list-layer-versions --layer-name uniswap-sdk | jq -r '.LayerVersions | max_by(.Version) | .Version')
          echo LATEST_VERSION=$LATEST_VERSION
          LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:240910251918:layer:uniswap-sdk:$LATEST_VERSION"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Remove development dependencies
        run: yarn --production
      - name: Install Serverless Framework
        run: |
          yarn global add serverless
          serverless plugin install -n serverless-offline
          serverless plugin install -n serverless-dotenv-plugin
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAYER_ARN: ${{ env.LAYER_ARN }}
          DB_HOST: ${{ secrets.DEMO_DB_HOST }}
          DB_PORT: ${{ secrets.DEMO_DB_PORT }}
          DB_NAME: ${{ secrets.DEMO_DB_NAME }}
          DB_USER: ${{ secrets.DEMO_DB_USER }}
          DB_PASSWORD: ${{ secrets.DEMO_DB_PASSWORD }}
          S3_BUCKET_CONFIG: ${{ secrets.S3_BUCKET_CONFIG }}
          S3_ADDRESSES_KEY: ${{ secrets.DEMO_S3_ADDRESSES_KEY }}
          RPC_URL: ${{ secrets.DEMO_RPC_URL }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_API_URI: ${{ secrets.NEW_RELIC_API_URI }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ENVIRONMENT: "demo"
        run: serverless deploy --stage demo
