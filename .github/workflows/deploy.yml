name: Deploy to Prod Stage

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}
  
jobs:

  deploy-sustainable-leverage-liquidation-bot-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dotenvx
        run: | 
          curl -fsS https://dotenvx.sh/ | sh

      - name: Install dependencies
        run: |
          yarn
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk

      - name: Build
        run: yarn build

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.STABLE_LIQUIDATOR_NODE_EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.STABLE_LIQUIDATOR_NODE_SSH_KEY }}
          port: 22
          source: "."
          target: "/srv"

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.STABLE_LIQUIDATOR_NODE_EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.STABLE_LIQUIDATOR_NODE_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            ENVIRONMENT="demo" PAT_TOKEN=${{secrets.PAT_TOKEN}} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} DOTENV_KEY='${{ secrets.DOTENV_KEY_STABLE }}' dotenvx run --  cd /srv && pm2 kill && yarn install && pm2 start 'yarn liquidator'

  deploy-sustainable-leverage-liquidation-bot-demo-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dotenvx
        run: | 
          curl -fsS https://dotenvx.sh/ | sh

      - name: Install dependencies
        run: |
          yarn
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk

      - name: Build
        run: yarn build

      - name: Lint Code
        run: npx eslint src/**/*.ts --ext .js,.jsx,.ts,.tsx --ignore-pattern /devops/  

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.DEMO_LIQUIDATOR_NODE_EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.DEMO_LIQUIDATOR_NODE_SSH_KEY }}
          port: 22
          source: "."
          target: "/srv"

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.DEMO_LIQUIDATOR_NODE_EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.DEMO_LIQUIDATOR_NODE_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd /srv
            pm2 kill                                    # Stops all PM2-managed applications
            ENVIRONMENT="demo" PAT_TOKEN=${{secrets.PAT_TOKEN}} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} DOTENV_KEY='${{ secrets.DOTENV_KEY_DEMO }}' dotenvx run --  yarn install && pm2 start 'yarn liquidator'

  report-devops-event-deploy:
      runs-on: ubuntu-latest
      needs: [deploy-sustainable-leverage-liquidation-bot-ec2, deploy-sustainable-leverage-liquidation-bot-demo-ec2]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            submodules: 'recursive'
            fetch-depth: 0
        
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 20
            cache: 'yarn'

        - name: Install dotenvx
          run: | 
            curl -fsS https://dotenvx.sh/ | sh
  
        - name: List all commit SHAs involved in the push
          id: format_commits
          shell: bash
          run: |
            ./devops/github_actions_templates/get_commit_shas.sh ${{ github.event.before }} ${{ github.event.after }} > commit_shas.txt
            COMMIT_SHAS_JSON=$(cat commit_shas.txt)
            echo "::set-output name=commit_shas::$COMMIT_SHAS_JSON"
  
        - name: Report DevOps Event
          run: |
            yarn add axios dotenv
            node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} deploy '{"commit_ids": ${{ steps.format_commits.outputs.commit_shas }} }'          
          env:
            API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
            DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}
  
        - name: Slack Notification
          if: always()
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
        - name: SonarCloud Scan
          uses: SonarSource/sonarcloud-github-action@master
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}