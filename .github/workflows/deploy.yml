name: Deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }} # SSH private key stored in GitHub secrets
  EC2_HOST: ${{ secrets.EC2_HOST }} # EC2 instance IP or domain
  DEMO_EC2_HOST: ${{ secrets.DEMO_EC2_HOST }} # EC2 Demo instance IP or domain
  EC2_USER: ubuntu
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  
jobs:
  download-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Download Trigger Artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy-trigger

  deploy-sustainable-leverage-liquidation-bot-ec2:
    runs-on: ubuntu-latest
    needs: [download-trigger]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          yarn
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk

      - name: Build
        run: yarn build

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          source: "."
          target: "/srv"

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd /srv
            cat > .env << EOF
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            S3_BUCKET_CONFIG=${{ secrets.S3_BUCKET_CONFIG }}
            S3_ADDRESSES_KEY=${{ secrets.S3_ADDRESSES_KEY }}
            RPC_URL=${{ secrets.RPC_URL }}
            MAINNET_RPC_URL=${{ secrets.MAINNET_RPC_URL }}
            NEW_RELIC_API_KEY=${{ secrets.NEW_RELIC_API_KEY }}
            PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
            ENVIRONMENT="demo"
            EOF
            pm2 kill                                    # Stops all PM2-managed applications
            export PAT_TOKEN=${{ secrets.PAT_TOKEN }}   # GitHub personal access token for installing the Backend-SDK
            yarn install                                # Install dependencies
            pm2 start 'yarn liquidator'                 # Run the liquidator bot

  deploy-sustainable-leverage-liquidation-bot-demo-ec2:
    runs-on: ubuntu-latest
    needs: ["download-trigger"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          yarn
          yarn add @uniswap/router-sdk @uniswap/sdk-core @uniswap/smart-order-router @uniswap/v3-sdk

      - name: Build
        run: yarn build

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.DEMO_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          source: "."
          target: "/srv"

      - name: Run deployment script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEMO_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            cd /srv
            cat > .env << EOF
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            DB_HOST=${{ secrets.DEMO_DB_HOST }}
            DB_PORT=${{ secrets.DEMO_DB_PORT }}
            DB_NAME=${{ secrets.DEMO_DB_NAME }}
            DB_USER=${{ secrets.DEMO_DB_USER }}
            DB_PASSWORD=${{ secrets.DEMO_DB_PASSWORD }}
            S3_BUCKET_CONFIG=${{ secrets.S3_BUCKET_CONFIG }}
            S3_ADDRESSES_KEY=${{ secrets.DEMO_S3_ADDRESSES_KEY }}
            RPC_URL=${{ secrets.DEMO_RPC_URL }}
            MAINNET_RPC_URL=${{ secrets.MAINNET_RPC_URL }}
            NEW_RELIC_API_KEY=${{ secrets.NEW_RELIC_API_KEY }}
            PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
            ENVIRONMENT="demo"
            EOF
            pm2 kill                                    # Stops all PM2-managed applications
            export PAT_TOKEN=${{ secrets.PAT_TOKEN }}   # GitHub personal access token for installing the Backend-SDK
            yarn install                                # Install dependencies
            pm2 start 'yarn liquidator'                 # Run the liquidator bot

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
            
      - name: Report deploy event
        run: |
          yarn add install axios dotenv
          node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} "deploy"
