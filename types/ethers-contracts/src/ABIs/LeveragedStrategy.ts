/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type DependencyAddressesStruct = {
  expiredVault: AddressLike;
  leverageDepositor: AddressLike;
  positionToken: AddressLike;
  wbtcVault: AddressLike;
  proxyAdmin: AddressLike;
  leveragedStrategy: AddressLike;
  protocolParameters: AddressLike;
  oracleManager: AddressLike;
  positionOpener: AddressLike;
  positionCloser: AddressLike;
  positionLiquidator: AddressLike;
  positionLedger: AddressLike;
  swapManager: AddressLike;
};

export type DependencyAddressesStructOutput = [
  expiredVault: string,
  leverageDepositor: string,
  positionToken: string,
  wbtcVault: string,
  proxyAdmin: string,
  leveragedStrategy: string,
  protocolParameters: string,
  oracleManager: string,
  positionOpener: string,
  positionCloser: string,
  positionLiquidator: string,
  positionLedger: string,
  swapManager: string
] & {
  expiredVault: string;
  leverageDepositor: string;
  positionToken: string;
  wbtcVault: string;
  proxyAdmin: string;
  leveragedStrategy: string;
  protocolParameters: string;
  oracleManager: string;
  positionOpener: string;
  positionCloser: string;
  positionLiquidator: string;
  positionLedger: string;
  swapManager: string;
};

export declare namespace LeveragedStrategy {
  export type StrategyConfigStruct = {
    quota: BigNumberish;
    positionLifetime: BigNumberish;
    maximumMultiplier: BigNumberish;
    liquidationBuffer: BigNumberish;
    liquidationFee: BigNumberish;
  };

  export type StrategyConfigStructOutput = [
    quota: bigint,
    positionLifetime: bigint,
    maximumMultiplier: bigint,
    liquidationBuffer: bigint,
    liquidationFee: bigint
  ] & {
    quota: bigint;
    positionLifetime: bigint;
    maximumMultiplier: bigint;
    liquidationBuffer: bigint;
    liquidationFee: bigint;
  };
}

export interface LeveragedStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "getEstimateSharesForWBTCDeposit"
      | "getLiquidationBuffer"
      | "getLiquidationFee"
      | "getMaximumMultiplier"
      | "getPositionLifetime"
      | "getQuota"
      | "getRoleAdmin"
      | "getStrategyValueAsset"
      | "getTokenValueFromWBTCAmount"
      | "getWBTCValueFromTokenAmount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCollateralToBorrowRatioAllowed"
      | "isPositionLiquidatable"
      | "isPositionLiquidatableEstimation"
      | "previewPositionValueInWBTC"
      | "reduceQuotaBy"
      | "removeStrategy"
      | "renounceRole"
      | "revokeRole"
      | "setDependencies"
      | "setLiquidationFee"
      | "setQuota"
      | "setStrategyConfig"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StrategyConfigUpdated"
      | "StrategyLiquidationFeeUpdated"
      | "StrategyRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEstimateSharesForWBTCDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationBuffer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumMultiplier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLifetime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuota",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyValueAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenValueFromWBTCAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWBTCValueFromTokenAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralToBorrowRatioAllowed",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionLiquidatable",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionLiquidatableEstimation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewPositionValueInWBTC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceQuotaBy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [DependencyAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuota",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyConfig",
    values: [AddressLike, LeveragedStrategy.StrategyConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEstimateSharesForWBTCDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuota", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyValueAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenValueFromWBTCAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWBTCValueFromTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralToBorrowRatioAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionLiquidatableEstimation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewPositionValueInWBTC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceQuotaBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuota", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyConfigUpdatedEvent {
  export type InputTuple = [
    strategy: AddressLike,
    quota: BigNumberish,
    positionLifetime: BigNumberish,
    maximumMultiplier: BigNumberish,
    liquidationBuffer: BigNumberish,
    liquidationFee: BigNumberish
  ];
  export type OutputTuple = [
    strategy: string,
    quota: bigint,
    positionLifetime: bigint,
    maximumMultiplier: bigint,
    liquidationBuffer: bigint,
    liquidationFee: bigint
  ];
  export interface OutputObject {
    strategy: string;
    quota: bigint;
    positionLifetime: bigint;
    maximumMultiplier: bigint;
    liquidationBuffer: bigint;
    liquidationFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyLiquidationFeeUpdatedEvent {
  export type InputTuple = [strategy: AddressLike, fee: BigNumberish];
  export type OutputTuple = [strategy: string, fee: bigint];
  export interface OutputObject {
    strategy: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRemovedEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LeveragedStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): LeveragedStrategy;
  waitForDeployment(): Promise<this>;

  interface: LeveragedStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  getEstimateSharesForWBTCDeposit: TypedContractMethod<
    [strategy: AddressLike, wbtcDepositAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getLiquidationBuffer: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  getLiquidationFee: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  getMaximumMultiplier: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  getPositionLifetime: TypedContractMethod<
    [strategy: AddressLike],
    [bigint],
    "view"
  >;

  getQuota: TypedContractMethod<[strategy: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStrategyValueAsset: TypedContractMethod<
    [strategy: AddressLike],
    [string],
    "view"
  >;

  getTokenValueFromWBTCAmount: TypedContractMethod<
    [token: AddressLike, wbtcAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getWBTCValueFromTokenAmount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isCollateralToBorrowRatioAllowed: TypedContractMethod<
    [
      strategy: AddressLike,
      collateralAmount: BigNumberish,
      borrowedAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;

  isPositionLiquidatable: TypedContractMethod<
    [strategy: AddressLike, positionValue: BigNumberish, debt: BigNumberish],
    [boolean],
    "view"
  >;

  isPositionLiquidatableEstimation: TypedContractMethod<
    [nftId: BigNumberish],
    [boolean],
    "view"
  >;

  previewPositionValueInWBTC: TypedContractMethod<
    [nftId: BigNumberish],
    [bigint],
    "view"
  >;

  reduceQuotaBy: TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeStrategy: TypedContractMethod<
    [strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDependencies: TypedContractMethod<
    [dependencies: DependencyAddressesStruct],
    [void],
    "nonpayable"
  >;

  setLiquidationFee: TypedContractMethod<
    [strategy: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setQuota: TypedContractMethod<
    [strategy: AddressLike, quota: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStrategyConfig: TypedContractMethod<
    [strategy: AddressLike, config: LeveragedStrategy.StrategyConfigStruct],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEstimateSharesForWBTCDeposit"
  ): TypedContractMethod<
    [strategy: AddressLike, wbtcDepositAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationBuffer"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidationFee"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaximumMultiplier"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionLifetime"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuota"
  ): TypedContractMethod<[strategy: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyValueAsset"
  ): TypedContractMethod<[strategy: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenValueFromWBTCAmount"
  ): TypedContractMethod<
    [token: AddressLike, wbtcAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWBTCValueFromTokenAmount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCollateralToBorrowRatioAllowed"
  ): TypedContractMethod<
    [
      strategy: AddressLike,
      collateralAmount: BigNumberish,
      borrowedAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPositionLiquidatable"
  ): TypedContractMethod<
    [strategy: AddressLike, positionValue: BigNumberish, debt: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPositionLiquidatableEstimation"
  ): TypedContractMethod<[nftId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "previewPositionValueInWBTC"
  ): TypedContractMethod<[nftId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "reduceQuotaBy"
  ): TypedContractMethod<
    [strategy: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStrategy"
  ): TypedContractMethod<[strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDependencies"
  ): TypedContractMethod<
    [dependencies: DependencyAddressesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationFee"
  ): TypedContractMethod<
    [strategy: AddressLike, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setQuota"
  ): TypedContractMethod<
    [strategy: AddressLike, quota: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyConfig"
  ): TypedContractMethod<
    [strategy: AddressLike, config: LeveragedStrategy.StrategyConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyConfigUpdated"
  ): TypedContractEvent<
    StrategyConfigUpdatedEvent.InputTuple,
    StrategyConfigUpdatedEvent.OutputTuple,
    StrategyConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyLiquidationFeeUpdated"
  ): TypedContractEvent<
    StrategyLiquidationFeeUpdatedEvent.InputTuple,
    StrategyLiquidationFeeUpdatedEvent.OutputTuple,
    StrategyLiquidationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRemoved"
  ): TypedContractEvent<
    StrategyRemovedEvent.InputTuple,
    StrategyRemovedEvent.OutputTuple,
    StrategyRemovedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StrategyConfigUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StrategyConfigUpdatedEvent.InputTuple,
      StrategyConfigUpdatedEvent.OutputTuple,
      StrategyConfigUpdatedEvent.OutputObject
    >;
    StrategyConfigUpdated: TypedContractEvent<
      StrategyConfigUpdatedEvent.InputTuple,
      StrategyConfigUpdatedEvent.OutputTuple,
      StrategyConfigUpdatedEvent.OutputObject
    >;

    "StrategyLiquidationFeeUpdated(address,uint256)": TypedContractEvent<
      StrategyLiquidationFeeUpdatedEvent.InputTuple,
      StrategyLiquidationFeeUpdatedEvent.OutputTuple,
      StrategyLiquidationFeeUpdatedEvent.OutputObject
    >;
    StrategyLiquidationFeeUpdated: TypedContractEvent<
      StrategyLiquidationFeeUpdatedEvent.InputTuple,
      StrategyLiquidationFeeUpdatedEvent.OutputTuple,
      StrategyLiquidationFeeUpdatedEvent.OutputObject
    >;

    "StrategyRemoved(address)": TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
    StrategyRemoved: TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
  };
}
