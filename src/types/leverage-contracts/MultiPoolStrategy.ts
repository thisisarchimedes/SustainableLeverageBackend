/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MultiPoolStrategy {
  export type AdjustStruct = {
    adapter: AddressLike;
    amount: BigNumberish;
    minReceive: BigNumberish;
  };

  export type AdjustStructOutput = [
    adapter: string,
    amount: bigint,
    minReceive: bigint
  ] & { adapter: string; amount: bigint; minReceive: bigint };

  export type SwapDataStruct = {
    token: AddressLike;
    amount: BigNumberish;
    callData: BytesLike;
  };

  export type SwapDataStructOutput = [
    token: string,
    amount: bigint,
    callData: string
  ] & { token: string; amount: bigint; callData: string };
}

export interface MultiPoolStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LIFI_DIAMOND"
      | "adapters"
      | "addAdapter"
      | "addAdapters"
      | "adjust"
      | "adjustInInterval"
      | "adjustOutInterval"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "changeAdapterHealthFactor"
      | "changeAdjustInInterval"
      | "changeAdjustOutInterval"
      | "changeFeePercentage"
      | "changeFeeRecipient"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "doHardWork"
      | "feePercentage"
      | "feeRecipient"
      | "increaseAllowance"
      | "initialize(address,address,string,string)"
      | "initialize(address,address)"
      | "isAdapter"
      | "lastAdjustIn"
      | "lastAdjustOut"
      | "lastRewardAmount"
      | "lastSync"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "minPercentage"
      | "monitor"
      | "name"
      | "owner"
      | "paused"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "redeem"
      | "removeAdapter"
      | "renounceOwnership"
      | "rewardsCycleEnd"
      | "rewardsCycleLength"
      | "setMinimumPercentage"
      | "setMonitor"
      | "storedTotalAssets"
      | "symbol"
      | "togglePause"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Adjusted"
      | "Approval"
      | "Deposit"
      | "HardWork"
      | "Initialized"
      | "NewRewardsCycle"
      | "OwnershipTransferred"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LIFI_DIAMOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdapters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "adjust",
    values: [
      MultiPoolStrategy.AdjustStruct[],
      MultiPoolStrategy.AdjustStruct[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustInInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustOutInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdapterHealthFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdjustInInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdjustOutInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values: [AddressLike[], MultiPoolStrategy.SwapDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address,string,string)",
    values: [AddressLike, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAdjustIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAdjustOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastSync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "monitor", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCycleEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCycleLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMonitor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIFI_DIAMOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adjust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustInInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustOutInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdapterHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdjustInInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdjustOutInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAdjustIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAdjustOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastSync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "monitor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCycleEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCycleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMonitor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AdjustedEvent {
  export type InputTuple = [amount: BigNumberish, isAdjustIn: boolean];
  export type OutputTuple = [amount: bigint, isAdjustIn: boolean];
  export interface OutputObject {
    amount: bigint;
    isAdjustIn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HardWorkEvent {
  export type InputTuple = [totalClaimed: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [totalClaimed: bigint, fee: bigint];
  export interface OutputObject {
    totalClaimed: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRewardsCycleEvent {
  export type InputTuple = [cycleEnd: BigNumberish, rewardAmount: BigNumberish];
  export type OutputTuple = [cycleEnd: bigint, rewardAmount: bigint];
  export interface OutputObject {
    cycleEnd: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiPoolStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): MultiPoolStrategy;
  waitForDeployment(): Promise<this>;

  interface: MultiPoolStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LIFI_DIAMOND: TypedContractMethod<[], [string], "view">;

  adapters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addAdapter: TypedContractMethod<
    [_adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  addAdapters: TypedContractMethod<
    [_adapters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  adjust: TypedContractMethod<
    [
      _adjustIns: MultiPoolStrategy.AdjustStruct[],
      _adjustOuts: MultiPoolStrategy.AdjustStruct[],
      _sortedAdapters: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  adjustInInterval: TypedContractMethod<[], [bigint], "view">;

  adjustOutInterval: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  changeAdapterHealthFactor: TypedContractMethod<
    [_adapter: AddressLike, _healthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeAdjustInInterval: TypedContractMethod<
    [_adjustInInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeAdjustOutInterval: TypedContractMethod<
    [_adjustOutInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  doHardWork: TypedContractMethod<
    [
      _adaptersToClaim: AddressLike[],
      _swapDatas: MultiPoolStrategy.SwapDataStruct[]
    ],
    [void],
    "nonpayable"
  >;

  feePercentage: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "initialize(address,address,string,string)": TypedContractMethod<
    [
      _stakingToken: AddressLike,
      _monitor: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;

  "initialize(address,address)": TypedContractMethod<
    [_stakingToken: AddressLike, _monitor: AddressLike],
    [void],
    "nonpayable"
  >;

  isAdapter: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastAdjustIn: TypedContractMethod<[], [bigint], "view">;

  lastAdjustOut: TypedContractMethod<[], [bigint], "view">;

  lastRewardAmount: TypedContractMethod<[], [bigint], "view">;

  lastSync: TypedContractMethod<[], [bigint], "view">;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  minPercentage: TypedContractMethod<[], [bigint], "view">;

  monitor: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  redeem: TypedContractMethod<
    [
      shares: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike,
      minimumReceive: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  removeAdapter: TypedContractMethod<
    [_adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsCycleEnd: TypedContractMethod<[], [bigint], "view">;

  rewardsCycleLength: TypedContractMethod<[], [bigint], "view">;

  setMinimumPercentage: TypedContractMethod<
    [_minPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMonitor: TypedContractMethod<
    [_monitor: AddressLike],
    [void],
    "nonpayable"
  >;

  storedTotalAssets: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  togglePause: TypedContractMethod<[], [void], "nonpayable">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      assets: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike,
      minimumReceive: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LIFI_DIAMOND"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adapters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addAdapter"
  ): TypedContractMethod<[_adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAdapters"
  ): TypedContractMethod<[_adapters: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adjust"
  ): TypedContractMethod<
    [
      _adjustIns: MultiPoolStrategy.AdjustStruct[],
      _adjustOuts: MultiPoolStrategy.AdjustStruct[],
      _sortedAdapters: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adjustInInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adjustOutInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeAdapterHealthFactor"
  ): TypedContractMethod<
    [_adapter: AddressLike, _healthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAdjustInInterval"
  ): TypedContractMethod<
    [_adjustInInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAdjustOutInterval"
  ): TypedContractMethod<
    [_adjustOutInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doHardWork"
  ): TypedContractMethod<
    [
      _adaptersToClaim: AddressLike[],
      _swapDatas: MultiPoolStrategy.SwapDataStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize(address,address,string,string)"
  ): TypedContractMethod<
    [
      _stakingToken: AddressLike,
      _monitor: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize(address,address)"
  ): TypedContractMethod<
    [_stakingToken: AddressLike, _monitor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAdapter"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAdjustIn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastAdjustOut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastSync"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "monitor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [
      shares: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike,
      minimumReceive: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdapter"
  ): TypedContractMethod<[_adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsCycleEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsCycleLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setMinimumPercentage"
  ): TypedContractMethod<[_minPercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMonitor"
  ): TypedContractMethod<[_monitor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storedTotalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "togglePause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      assets: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike,
      minimumReceive: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Adjusted"
  ): TypedContractEvent<
    AdjustedEvent.InputTuple,
    AdjustedEvent.OutputTuple,
    AdjustedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "HardWork"
  ): TypedContractEvent<
    HardWorkEvent.InputTuple,
    HardWorkEvent.OutputTuple,
    HardWorkEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewRewardsCycle"
  ): TypedContractEvent<
    NewRewardsCycleEvent.InputTuple,
    NewRewardsCycleEvent.OutputTuple,
    NewRewardsCycleEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Adjusted(uint256,bool)": TypedContractEvent<
      AdjustedEvent.InputTuple,
      AdjustedEvent.OutputTuple,
      AdjustedEvent.OutputObject
    >;
    Adjusted: TypedContractEvent<
      AdjustedEvent.InputTuple,
      AdjustedEvent.OutputTuple,
      AdjustedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "HardWork(uint256,uint256)": TypedContractEvent<
      HardWorkEvent.InputTuple,
      HardWorkEvent.OutputTuple,
      HardWorkEvent.OutputObject
    >;
    HardWork: TypedContractEvent<
      HardWorkEvent.InputTuple,
      HardWorkEvent.OutputTuple,
      HardWorkEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewRewardsCycle(uint32,uint256)": TypedContractEvent<
      NewRewardsCycleEvent.InputTuple,
      NewRewardsCycleEvent.OutputTuple,
      NewRewardsCycleEvent.OutputObject
    >;
    NewRewardsCycle: TypedContractEvent<
      NewRewardsCycleEvent.InputTuple,
      NewRewardsCycleEvent.OutputTuple,
      NewRewardsCycleEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
