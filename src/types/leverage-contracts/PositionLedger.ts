/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type LedgerEntryStruct = {
  collateralAmount: BigNumberish;
  strategyAddress: AddressLike;
  strategyShares: BigNumberish;
  wbtcDebtAmount: BigNumberish;
  poistionOpenBlock: BigNumberish;
  positionExpirationBlock: BigNumberish;
  liquidationBuffer: BigNumberish;
  state: BigNumberish;
  claimableAmount: BigNumberish;
};

export type LedgerEntryStructOutput = [
  collateralAmount: bigint,
  strategyAddress: string,
  strategyShares: bigint,
  wbtcDebtAmount: bigint,
  poistionOpenBlock: bigint,
  positionExpirationBlock: bigint,
  liquidationBuffer: bigint,
  state: bigint,
  claimableAmount: bigint
] & {
  collateralAmount: bigint;
  strategyAddress: string;
  strategyShares: bigint;
  wbtcDebtAmount: bigint;
  poistionOpenBlock: bigint;
  positionExpirationBlock: bigint;
  liquidationBuffer: bigint;
  state: bigint;
  claimableAmount: bigint;
};

export type DependencyAddressesStruct = {
  expiredVault: AddressLike;
  leverageDepositor: AddressLike;
  positionToken: AddressLike;
  wbtcVault: AddressLike;
  proxyAdmin: AddressLike;
  leveragedStrategy: AddressLike;
  protocolParameters: AddressLike;
  oracleManager: AddressLike;
  positionOpener: AddressLike;
  positionCloser: AddressLike;
  positionLiquidator: AddressLike;
  positionExpirator: AddressLike;
  positionLedger: AddressLike;
  swapManager: AddressLike;
};

export type DependencyAddressesStructOutput = [
  expiredVault: string,
  leverageDepositor: string,
  positionToken: string,
  wbtcVault: string,
  proxyAdmin: string,
  leveragedStrategy: string,
  protocolParameters: string,
  oracleManager: string,
  positionOpener: string,
  positionCloser: string,
  positionLiquidator: string,
  positionExpirator: string,
  positionLedger: string,
  swapManager: string
] & {
  expiredVault: string;
  leverageDepositor: string;
  positionToken: string;
  wbtcVault: string;
  proxyAdmin: string;
  leveragedStrategy: string;
  protocolParameters: string;
  oracleManager: string;
  positionOpener: string;
  positionCloser: string;
  positionLiquidator: string;
  positionExpirator: string;
  positionLedger: string;
  swapManager: string;
};

export interface PositionLedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "claimableAmountWasClaimed"
      | "createNewPositionEntry"
      | "entries"
      | "getClaimableAmount"
      | "getCollateralAmount"
      | "getDebtAmount"
      | "getExpirationBlock"
      | "getOpenBlock"
      | "getPosition"
      | "getPositionState"
      | "getRoleAdmin"
      | "getStrategyAddress"
      | "getStrategyShares"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isPositionEligibleForExpiration"
      | "renounceRole"
      | "revokeRole"
      | "setClaimableAmount"
      | "setDependencies"
      | "setPositionState"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmountWasClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPositionEntry",
    values: [BigNumberish, LedgerEntryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "entries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpirationBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionEligibleForExpiration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [DependencyAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmountWasClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPositionEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpirationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPositionEligibleForExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionLedger extends BaseContract {
  connect(runner?: ContractRunner | null): PositionLedger;
  waitForDeployment(): Promise<this>;

  interface: PositionLedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  claimableAmountWasClaimed: TypedContractMethod<
    [nftID: BigNumberish],
    [void],
    "nonpayable"
  >;

  createNewPositionEntry: TypedContractMethod<
    [nftID: BigNumberish, entry: LedgerEntryStruct],
    [void],
    "nonpayable"
  >;

  entries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        collateralAmount: bigint;
        strategyAddress: string;
        strategyShares: bigint;
        wbtcDebtAmount: bigint;
        poistionOpenBlock: bigint;
        positionExpirationBlock: bigint;
        liquidationBuffer: bigint;
        state: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;

  getClaimableAmount: TypedContractMethod<
    [nftID: BigNumberish],
    [bigint],
    "view"
  >;

  getCollateralAmount: TypedContractMethod<
    [nftID: BigNumberish],
    [bigint],
    "view"
  >;

  getDebtAmount: TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;

  getExpirationBlock: TypedContractMethod<
    [nftID: BigNumberish],
    [bigint],
    "view"
  >;

  getOpenBlock: TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;

  getPosition: TypedContractMethod<
    [nftID: BigNumberish],
    [LedgerEntryStructOutput],
    "view"
  >;

  getPositionState: TypedContractMethod<
    [nftID: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStrategyAddress: TypedContractMethod<
    [nftID: BigNumberish],
    [string],
    "view"
  >;

  getStrategyShares: TypedContractMethod<
    [nftID: BigNumberish],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isPositionEligibleForExpiration: TypedContractMethod<
    [nftID: BigNumberish],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setClaimableAmount: TypedContractMethod<
    [nftID: BigNumberish, claimableAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDependencies: TypedContractMethod<
    [dependencies: DependencyAddressesStruct],
    [void],
    "nonpayable"
  >;

  setPositionState: TypedContractMethod<
    [nftID: BigNumberish, state: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimableAmountWasClaimed"
  ): TypedContractMethod<[nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createNewPositionEntry"
  ): TypedContractMethod<
    [nftID: BigNumberish, entry: LedgerEntryStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        collateralAmount: bigint;
        strategyAddress: string;
        strategyShares: bigint;
        wbtcDebtAmount: bigint;
        poistionOpenBlock: bigint;
        positionExpirationBlock: bigint;
        liquidationBuffer: bigint;
        state: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableAmount"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralAmount"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDebtAmount"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpirationBlock"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOpenBlock"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [nftID: BigNumberish],
    [LedgerEntryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionState"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyAddress"
  ): TypedContractMethod<[nftID: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyShares"
  ): TypedContractMethod<[nftID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPositionEligibleForExpiration"
  ): TypedContractMethod<[nftID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimableAmount"
  ): TypedContractMethod<
    [nftID: BigNumberish, claimableAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDependencies"
  ): TypedContractMethod<
    [dependencies: DependencyAddressesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionState"
  ): TypedContractMethod<
    [nftID: BigNumberish, state: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
