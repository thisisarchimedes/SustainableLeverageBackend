/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AuraAdapterBase {
  export type RewardDataStruct = { token: AddressLike; amount: BigNumberish };

  export type RewardDataStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };
}

export interface AuraComposableStablePoolAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AURA"
      | "AURA_BOOSTER"
      | "BAL"
      | "auraPid"
      | "auraRewardPool"
      | "claim"
      | "deposit"
      | "healthFactor"
      | "initialize"
      | "isHealthy"
      | "lpBalance"
      | "multiPoolStrategy"
      | "pool"
      | "poolId"
      | "rewardTokens"
      | "setHealthFactor"
      | "storedUnderlyingBalance"
      | "tokenIndex"
      | "totalClaimable"
      | "underlyingBalance"
      | "underlyingToken"
      | "vault"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(functionFragment: "AURA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AURA_BOOSTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BAL", values?: undefined): string;
  encodeFunctionData(functionFragment: "auraPid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auraRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isHealthy", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpBalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiPoolStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedUnderlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AURA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AURA_BOOSTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BAL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auraPid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auraRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "healthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHealthy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiPoolStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedUnderlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuraComposableStablePoolAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): AuraComposableStablePoolAdapter;
  waitForDeployment(): Promise<this>;

  interface: AuraComposableStablePoolAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AURA: TypedContractMethod<[], [string], "view">;

  AURA_BOOSTER: TypedContractMethod<[], [string], "view">;

  BAL: TypedContractMethod<[], [string], "view">;

  auraPid: TypedContractMethod<[], [bigint], "view">;

  auraRewardPool: TypedContractMethod<[], [string], "view">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<
    [_amount: BigNumberish, _minReceiveAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  healthFactor: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _poolId: BytesLike,
      _multiPoolStrategy: AddressLike,
      _auraPid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isHealthy: TypedContractMethod<[], [boolean], "view">;

  lpBalance: TypedContractMethod<[], [bigint], "view">;

  multiPoolStrategy: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  poolId: TypedContractMethod<[], [string], "view">;

  rewardTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setHealthFactor: TypedContractMethod<
    [_newHealthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  storedUnderlyingBalance: TypedContractMethod<[], [bigint], "view">;

  tokenIndex: TypedContractMethod<[], [bigint], "view">;

  totalClaimable: TypedContractMethod<
    [],
    [AuraAdapterBase.RewardDataStructOutput[]],
    "view"
  >;

  underlyingBalance: TypedContractMethod<[], [bigint], "view">;

  underlyingToken: TypedContractMethod<[], [string], "view">;

  vault: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_amount: BigNumberish, _minReceiveAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AURA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AURA_BOOSTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auraPid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auraRewardPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amount: BigNumberish, _minReceiveAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "healthFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _poolId: BytesLike,
      _multiPoolStrategy: AddressLike,
      _auraPid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isHealthy"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiPoolStrategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setHealthFactor"
  ): TypedContractMethod<
    [_newHealthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storedUnderlyingBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalClaimable"
  ): TypedContractMethod<
    [],
    [AuraAdapterBase.RewardDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlyingBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "underlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_amount: BigNumberish, _minReceiveAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
