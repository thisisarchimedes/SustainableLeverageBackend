/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ComposableStablePool {
  export type NewPoolParamsStruct = {
    vault: AddressLike;
    protocolFeeProvider: AddressLike;
    name: string;
    symbol: string;
    tokens: AddressLike[];
    rateProviders: AddressLike[];
    tokenRateCacheDurations: BigNumberish[];
    exemptFromYieldProtocolFeeFlag: boolean;
    amplificationParameter: BigNumberish;
    swapFeePercentage: BigNumberish;
    pauseWindowDuration: BigNumberish;
    bufferPeriodDuration: BigNumberish;
    owner: AddressLike;
    version: string;
  };

  export type NewPoolParamsStructOutput = [
    vault: string,
    protocolFeeProvider: string,
    name: string,
    symbol: string,
    tokens: string[],
    rateProviders: string[],
    tokenRateCacheDurations: bigint[],
    exemptFromYieldProtocolFeeFlag: boolean,
    amplificationParameter: bigint,
    swapFeePercentage: bigint,
    pauseWindowDuration: bigint,
    bufferPeriodDuration: bigint,
    owner: string,
    version: string
  ] & {
    vault: string;
    protocolFeeProvider: string;
    name: string;
    symbol: string;
    tokens: string[];
    rateProviders: string[];
    tokenRateCacheDurations: bigint[];
    exemptFromYieldProtocolFeeFlag: boolean;
    amplificationParameter: bigint;
    swapFeePercentage: bigint;
    pauseWindowDuration: bigint;
    bufferPeriodDuration: bigint;
    owner: string;
    version: string;
  };
}

export declare namespace IPoolSwapStructs {
  export type SwapRequestStruct = {
    kind: BigNumberish;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amount: BigNumberish;
    poolId: BytesLike;
    lastChangeBlock: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    userData: BytesLike;
  };

  export type SwapRequestStructOutput = [
    kind: bigint,
    tokenIn: string,
    tokenOut: string,
    amount: bigint,
    poolId: string,
    lastChangeBlock: bigint,
    from: string,
    to: string,
    userData: string
  ] & {
    kind: bigint;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    poolId: string;
    lastChangeBlock: bigint;
    from: string;
    to: string;
    userData: string;
  };
}

export interface AuraComposableStablePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL"
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "disableRecoveryMode"
      | "enableRecoveryMode"
      | "getActionId"
      | "getActualSupply"
      | "getAmplificationParameter"
      | "getAuthorizer"
      | "getBptIndex"
      | "getDomainSeparator"
      | "getLastJoinExitData"
      | "getMinimumBpt"
      | "getNextNonce"
      | "getOwner"
      | "getPausedState"
      | "getPoolId"
      | "getProtocolFeePercentageCache"
      | "getProtocolFeesCollector"
      | "getProtocolSwapFeeDelegation"
      | "getRate"
      | "getRateProviders"
      | "getScalingFactors"
      | "getSwapFeePercentage"
      | "getTokenRate"
      | "getTokenRateCache"
      | "getVault"
      | "inRecoveryMode"
      | "increaseAllowance"
      | "isExemptFromYieldProtocolFee"
      | "isTokenExemptFromYieldProtocolFee"
      | "name"
      | "nonces"
      | "onExitPool"
      | "onJoinPool"
      | "onSwap"
      | "pause"
      | "permit"
      | "queryExit"
      | "queryJoin"
      | "setAssetManagerPoolConfig"
      | "setSwapFeePercentage"
      | "setTokenRateCacheDuration"
      | "startAmplificationParameterUpdate"
      | "stopAmplificationParameterUpdate"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "updateProtocolFeePercentageCache"
      | "updateTokenRateCache"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AmpUpdateStarted"
      | "AmpUpdateStopped"
      | "Approval"
      | "PausedStateChanged"
      | "ProtocolFeePercentageCacheUpdated"
      | "RecoveryModeStateChanged"
      | "SwapFeePercentageChanged"
      | "TokenRateCacheUpdated"
      | "TokenRateProviderSet"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmplificationParameter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBptIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastJoinExitData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumBpt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPausedState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeePercentageCache",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolSwapFeeDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRateProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRateCache",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExemptFromYieldProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenExemptFromYieldProtocolFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onExitPool",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onJoinPool",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwap",
    values: [
      IPoolSwapStructs.SwapRequestStruct,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetManagerPoolConfig",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRateCacheDuration",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startAmplificationParameterUpdate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopAmplificationParameterUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeePercentageCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenRateCache",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmplificationParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBptIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastJoinExitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumBpt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPausedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeePercentageCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolSwapFeeDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRateCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExemptFromYieldProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenExemptFromYieldProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onExitPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onJoinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetManagerPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRateCacheDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAmplificationParameterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopAmplificationParameterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeePercentageCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenRateCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AmpUpdateStartedEvent {
  export type InputTuple = [
    startValue: BigNumberish,
    endValue: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    startValue: bigint,
    endValue: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    startValue: bigint;
    endValue: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AmpUpdateStoppedEvent {
  export type InputTuple = [currentValue: BigNumberish];
  export type OutputTuple = [currentValue: bigint];
  export interface OutputObject {
    currentValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedStateChangedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeePercentageCacheUpdatedEvent {
  export type InputTuple = [
    feeType: BigNumberish,
    protocolFeePercentage: BigNumberish
  ];
  export type OutputTuple = [feeType: bigint, protocolFeePercentage: bigint];
  export interface OutputObject {
    feeType: bigint;
    protocolFeePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryModeStateChangedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapFeePercentageChangedEvent {
  export type InputTuple = [swapFeePercentage: BigNumberish];
  export type OutputTuple = [swapFeePercentage: bigint];
  export interface OutputObject {
    swapFeePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRateCacheUpdatedEvent {
  export type InputTuple = [tokenIndex: BigNumberish, rate: BigNumberish];
  export type OutputTuple = [tokenIndex: bigint, rate: bigint];
  export interface OutputObject {
    tokenIndex: bigint;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRateProviderSetEvent {
  export type InputTuple = [
    tokenIndex: BigNumberish,
    provider: AddressLike,
    cacheDuration: BigNumberish
  ];
  export type OutputTuple = [
    tokenIndex: bigint,
    provider: string,
    cacheDuration: bigint
  ];
  export interface OutputObject {
    tokenIndex: bigint;
    provider: string;
    cacheDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuraComposableStablePool extends BaseContract {
  connect(runner?: ContractRunner | null): AuraComposableStablePool;
  waitForDeployment(): Promise<this>;

  interface: AuraComposableStablePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  disableRecoveryMode: TypedContractMethod<[], [void], "nonpayable">;

  enableRecoveryMode: TypedContractMethod<[], [void], "nonpayable">;

  getActionId: TypedContractMethod<[selector: BytesLike], [string], "view">;

  getActualSupply: TypedContractMethod<[], [bigint], "view">;

  getAmplificationParameter: TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        value: bigint;
        isUpdating: boolean;
        precision: bigint;
      }
    ],
    "view"
  >;

  getAuthorizer: TypedContractMethod<[], [string], "view">;

  getBptIndex: TypedContractMethod<[], [bigint], "view">;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getLastJoinExitData: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        lastJoinExitAmplification: bigint;
        lastPostJoinExitInvariant: bigint;
      }
    ],
    "view"
  >;

  getMinimumBpt: TypedContractMethod<[], [bigint], "view">;

  getNextNonce: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPausedState: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        paused: boolean;
        pauseWindowEndTime: bigint;
        bufferPeriodEndTime: bigint;
      }
    ],
    "view"
  >;

  getPoolId: TypedContractMethod<[], [string], "view">;

  getProtocolFeePercentageCache: TypedContractMethod<
    [feeType: BigNumberish],
    [bigint],
    "view"
  >;

  getProtocolFeesCollector: TypedContractMethod<[], [string], "view">;

  getProtocolSwapFeeDelegation: TypedContractMethod<[], [boolean], "view">;

  getRate: TypedContractMethod<[], [bigint], "view">;

  getRateProviders: TypedContractMethod<[], [string[]], "view">;

  getScalingFactors: TypedContractMethod<[], [bigint[]], "view">;

  getSwapFeePercentage: TypedContractMethod<[], [bigint], "view">;

  getTokenRate: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getTokenRateCache: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        rate: bigint;
        oldRate: bigint;
        duration: bigint;
        expires: bigint;
      }
    ],
    "view"
  >;

  getVault: TypedContractMethod<[], [string], "view">;

  inRecoveryMode: TypedContractMethod<[], [boolean], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExemptFromYieldProtocolFee: TypedContractMethod<[], [boolean], "view">;

  isTokenExemptFromYieldProtocolFee: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onExitPool: TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;

  onJoinPool: TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;

  onSwap: TypedContractMethod<
    [
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: BigNumberish[],
      indexIn: BigNumberish,
      indexOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  queryExit: TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint, bigint[]] & { bptIn: bigint; amountsOut: bigint[] }],
    "nonpayable"
  >;

  queryJoin: TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint, bigint[]] & { bptOut: bigint; amountsIn: bigint[] }],
    "nonpayable"
  >;

  setAssetManagerPoolConfig: TypedContractMethod<
    [token: AddressLike, poolConfig: BytesLike],
    [void],
    "nonpayable"
  >;

  setSwapFeePercentage: TypedContractMethod<
    [swapFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenRateCacheDuration: TypedContractMethod<
    [token: AddressLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  startAmplificationParameterUpdate: TypedContractMethod<
    [rawEndValue: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  stopAmplificationParameterUpdate: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateProtocolFeePercentageCache: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  updateTokenRateCache: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableRecoveryMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableRecoveryMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActionId"
  ): TypedContractMethod<[selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getActualSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAmplificationParameter"
  ): TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        value: bigint;
        isUpdating: boolean;
        precision: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuthorizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBptIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastJoinExitData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        lastJoinExitAmplification: bigint;
        lastPostJoinExitInvariant: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinimumBpt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextNonce"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPausedState"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        paused: boolean;
        pauseWindowEndTime: bigint;
        bufferPeriodEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProtocolFeePercentageCache"
  ): TypedContractMethod<[feeType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolFeesCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProtocolSwapFeeDelegation"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRateProviders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getScalingFactors"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSwapFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenRateCache"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        rate: bigint;
        oldRate: bigint;
        duration: bigint;
        expires: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "inRecoveryMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExemptFromYieldProtocolFee"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenExemptFromYieldProtocolFee"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onExitPool"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onJoinPool"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint[], bigint[]]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onSwap"
  ): TypedContractMethod<
    [
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: BigNumberish[],
      indexIn: BigNumberish,
      indexOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryExit"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint, bigint[]] & { bptIn: bigint; amountsOut: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queryJoin"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike
    ],
    [[bigint, bigint[]] & { bptOut: bigint; amountsIn: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetManagerPoolConfig"
  ): TypedContractMethod<
    [token: AddressLike, poolConfig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapFeePercentage"
  ): TypedContractMethod<
    [swapFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenRateCacheDuration"
  ): TypedContractMethod<
    [token: AddressLike, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startAmplificationParameterUpdate"
  ): TypedContractMethod<
    [rawEndValue: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopAmplificationParameterUpdate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProtocolFeePercentageCache"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenRateCache"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AmpUpdateStarted"
  ): TypedContractEvent<
    AmpUpdateStartedEvent.InputTuple,
    AmpUpdateStartedEvent.OutputTuple,
    AmpUpdateStartedEvent.OutputObject
  >;
  getEvent(
    key: "AmpUpdateStopped"
  ): TypedContractEvent<
    AmpUpdateStoppedEvent.InputTuple,
    AmpUpdateStoppedEvent.OutputTuple,
    AmpUpdateStoppedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "PausedStateChanged"
  ): TypedContractEvent<
    PausedStateChangedEvent.InputTuple,
    PausedStateChangedEvent.OutputTuple,
    PausedStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeePercentageCacheUpdated"
  ): TypedContractEvent<
    ProtocolFeePercentageCacheUpdatedEvent.InputTuple,
    ProtocolFeePercentageCacheUpdatedEvent.OutputTuple,
    ProtocolFeePercentageCacheUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryModeStateChanged"
  ): TypedContractEvent<
    RecoveryModeStateChangedEvent.InputTuple,
    RecoveryModeStateChangedEvent.OutputTuple,
    RecoveryModeStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "SwapFeePercentageChanged"
  ): TypedContractEvent<
    SwapFeePercentageChangedEvent.InputTuple,
    SwapFeePercentageChangedEvent.OutputTuple,
    SwapFeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRateCacheUpdated"
  ): TypedContractEvent<
    TokenRateCacheUpdatedEvent.InputTuple,
    TokenRateCacheUpdatedEvent.OutputTuple,
    TokenRateCacheUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRateProviderSet"
  ): TypedContractEvent<
    TokenRateProviderSetEvent.InputTuple,
    TokenRateProviderSetEvent.OutputTuple,
    TokenRateProviderSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AmpUpdateStarted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AmpUpdateStartedEvent.InputTuple,
      AmpUpdateStartedEvent.OutputTuple,
      AmpUpdateStartedEvent.OutputObject
    >;
    AmpUpdateStarted: TypedContractEvent<
      AmpUpdateStartedEvent.InputTuple,
      AmpUpdateStartedEvent.OutputTuple,
      AmpUpdateStartedEvent.OutputObject
    >;

    "AmpUpdateStopped(uint256)": TypedContractEvent<
      AmpUpdateStoppedEvent.InputTuple,
      AmpUpdateStoppedEvent.OutputTuple,
      AmpUpdateStoppedEvent.OutputObject
    >;
    AmpUpdateStopped: TypedContractEvent<
      AmpUpdateStoppedEvent.InputTuple,
      AmpUpdateStoppedEvent.OutputTuple,
      AmpUpdateStoppedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "PausedStateChanged(bool)": TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;
    PausedStateChanged: TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;

    "ProtocolFeePercentageCacheUpdated(uint256,uint256)": TypedContractEvent<
      ProtocolFeePercentageCacheUpdatedEvent.InputTuple,
      ProtocolFeePercentageCacheUpdatedEvent.OutputTuple,
      ProtocolFeePercentageCacheUpdatedEvent.OutputObject
    >;
    ProtocolFeePercentageCacheUpdated: TypedContractEvent<
      ProtocolFeePercentageCacheUpdatedEvent.InputTuple,
      ProtocolFeePercentageCacheUpdatedEvent.OutputTuple,
      ProtocolFeePercentageCacheUpdatedEvent.OutputObject
    >;

    "RecoveryModeStateChanged(bool)": TypedContractEvent<
      RecoveryModeStateChangedEvent.InputTuple,
      RecoveryModeStateChangedEvent.OutputTuple,
      RecoveryModeStateChangedEvent.OutputObject
    >;
    RecoveryModeStateChanged: TypedContractEvent<
      RecoveryModeStateChangedEvent.InputTuple,
      RecoveryModeStateChangedEvent.OutputTuple,
      RecoveryModeStateChangedEvent.OutputObject
    >;

    "SwapFeePercentageChanged(uint256)": TypedContractEvent<
      SwapFeePercentageChangedEvent.InputTuple,
      SwapFeePercentageChangedEvent.OutputTuple,
      SwapFeePercentageChangedEvent.OutputObject
    >;
    SwapFeePercentageChanged: TypedContractEvent<
      SwapFeePercentageChangedEvent.InputTuple,
      SwapFeePercentageChangedEvent.OutputTuple,
      SwapFeePercentageChangedEvent.OutputObject
    >;

    "TokenRateCacheUpdated(uint256,uint256)": TypedContractEvent<
      TokenRateCacheUpdatedEvent.InputTuple,
      TokenRateCacheUpdatedEvent.OutputTuple,
      TokenRateCacheUpdatedEvent.OutputObject
    >;
    TokenRateCacheUpdated: TypedContractEvent<
      TokenRateCacheUpdatedEvent.InputTuple,
      TokenRateCacheUpdatedEvent.OutputTuple,
      TokenRateCacheUpdatedEvent.OutputObject
    >;

    "TokenRateProviderSet(uint256,address,uint256)": TypedContractEvent<
      TokenRateProviderSetEvent.InputTuple,
      TokenRateProviderSetEvent.OutputTuple,
      TokenRateProviderSetEvent.OutputObject
    >;
    TokenRateProviderSet: TypedContractEvent<
      TokenRateProviderSetEvent.InputTuple,
      TokenRateProviderSetEvent.OutputTuple,
      TokenRateProviderSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
